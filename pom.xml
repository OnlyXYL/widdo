<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>cn.widdo</groupId>
        <artifactId>widdo-dependencies</artifactId>
        <!--升级 -->
        <version>305.1.0.0</version>
        <relativePath>widdo-dependencies/pom.xml</relativePath>
    </parent>

    <artifactId>widdo</artifactId>
    <version>305.1.0.0</version>
    <packaging>pom</packaging>

    <name>widdo</name>
    <description>widdo</description>

    <modules>
        <module>widdo-cloud</module>
        <module>widdo-packages</module>
        <module>widdo-services</module>
        <module>widdo-dependencies</module>
        <module>widdo-docs</module>
        <module>widdo-autoconfigure</module>
        <module>widdo-starters</module>
    </modules>

    <!-- ${basedir} 项目根目录 -->
    <!-- ${project.build.directory} 构建目录，缺省为target -->
    <!-- ${project.build.outputDirectory} 构建过程输出目录，缺省为target/classes -->
    <!-- ${project.build.finalName} 产出物名称，缺省为${project.artifactId}-${project.version} -->
    <!-- ${project.packaging} 打包类型，缺省为jar -->
    <!-- ${project.xxx} 当前pom文件的任意节点的内容 如project.artifactId -->
    <properties>
        <!--配置参数-->
        <!--为了便于Docker的构建，减少上下文影响，将所有Docker资源放置在同一个目录中进行构建-->
        <!--docker信息改为自己的-->
        <docker.build.directory>../../configurations/docker/context/target</docker.build.directory>
        <docker.resource.name>${project.build.finalName}.${project.packaging}</docker.resource.name>
        <docker.host>http://101.42.10.77:2375</docker.host>
        <docker.namespace>101.42.10.77:5000</docker.namespace>
        <!--        <docker.registry>https://hub.docker.com</docker.registry>-->
        <docker.registry>101.42.10.77:5000</docker.registry>
        <docker.username>widdo</docker.username>
        <docker.password>widdo_docker</docker.password>
    </properties>

    <!-- 环境 -->
    <profiles>
        <!-- 开发 -->
        <profile>
            <id>dev</id>
            <activation>
                <!--默认激活配置-->
                <activeByDefault>true</activeByDefault>
            </activation>
            <properties>
                <!--当前环境-->
                <profiles.active>dev</profiles.active>
                <!--                <database.type>postgresql</database.type>-->
                <database.type>mysql8</database.type>
                <!--代码构建控制-->
                <!--跳过构建源代码包-->
                <skip.build.source.package>false</skip.build.source.package>
                <!--不copy代码包到docker构建目录-->
                <skip.copy.docker.resource>false</skip.copy.docker.resource>
                <!--不执行git commit 构建-->
                <skip.build.git.commit.info>false</skip.build.git.commit.info>
                <nacos.namespace>public</nacos.namespace>
                <nacos.group>DEFAULT_GROUP</nacos.group>
                <yaml.prefix>widdo</yaml.prefix>
                <yaml.prefix.default>application</yaml.prefix.default>
                <yaml.suffix>environment</yaml.suffix>
            </properties>
        </profile>
    </profiles>

    <build>
        <resources>
            <!-- 先指定 src/main/resources下所有文件及文件夹为资源文件 -->
            <resource>
                <directory>src/main/resources</directory>
                <includes>
                    <include>**/*</include>
                </includes>
                <filtering>true</filtering>
            </resource>
        </resources>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-antrun-plugin</artifactId>
                    <version>${maven-antrun-plugin.version}</version>
                    <executions>
                        <execution>
                            <id>delete-jar-file</id>
                            <phase>pre-clean</phase>
                            <goals>
                                <goal>run</goal>
                            </goals>
                            <configuration>
                                <target>
                                    <delete file="${docker.build.directory}/${docker.resource.name}"/>
                                </target>
                            </configuration>
                        </execution>
                        <execution>
                            <id>prepare-docker-resource</id>
                            <phase>package</phase>
                            <goals>
                                <goal>run</goal>
                            </goals>
                            <configuration>
                                <target>
                                    <!--jar包保存位置 -->
                                    <copy todir="${docker.build.directory}">
                                        <fileset dir="${project.basedir}/target">
                                            <include name="${docker.resource.name}"/>
                                        </fileset>
                                    </copy>
                                </target>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>
                <!-- docker打包插件 -->
                <!--存在问题，target目录下，嵌套好多层。很慢-->
                <!-- <plugin>
                     <groupId>com.spotify</groupId>
                     <artifactId>docker-maven-plugin</artifactId>
                     <version>1.2.2</version>
                     <configuration>
                         <serverId>docker-hub</serverId>
                         <registryUrl>https://hub.docker.com/</registryUrl>
                         <imageName>widdo-image</imageName>
                         &lt;!&ndash; 指定 Dockerfile 路径  ${project.basedir}：项目根路径下&ndash;&gt;
                         <dockerDirectory>${project.basedir}</dockerDirectory>
                         &lt;!&ndash;指定远程 docker api地址&ndash;&gt;
                         <dockerHost>${docker.host}</dockerHost>
                         &lt;!&ndash; 这里是复制 war 包到 docker 容器指定目录配置 &ndash;&gt;
                         <resources>
                             <resource>
                                 <targetPath>/</targetPath>
                                 &lt;!&ndash;jar 包所在的路径  此处配置的 即对应 target 目录&ndash;&gt;
                                 <directory>${project.build.directory}</directory>
                                 &lt;!&ndash; 需要包含的 jar包 ，这里对应的是 Dockerfile中添加的文件名　&ndash;&gt;
                                 <include>${project.build.finalName}.jar</include>
                             </resource>
                         </resources>
                     </configuration>
                     &lt;!&ndash;将插件绑定在某个phase执行&ndash;&gt;
                     <executions>
                         <execution>
                             <id>build-image</id>
                             <phase>package</phase>
                             <goals>
                                 <goal>build</goal>
                             </goals>
                         </execution>
                         <execution>
                             <id>tag-image</id>
                             <phase>package</phase>
                             <goals>
                                 <goal>tag</goal>
                             </goals>
                             <configuration>
                                 <image>widdo-image</image>
                                 <newName>https://hub.docker.com/widdo-image</newName>
                             </configuration>
                         </execution>
                         <execution>
                             <id>push-image</id>
                             <phase>deploy</phase>
                             <goals>
                                 <goal>push</goal>
                             </goals>
                             <configuration>
                                 <imageName>widdo-image</imageName>
                             </configuration>
                         </execution>
                     </executions>
                 </plugin>-->

                <!--dockerfile-maven-plugin-->
                <!--说明：此插件使用存在问题。由于镜像在构建时需要使用docker环境，但是本插件默认使用本地环境，package时报错：Caused by: java.io.FileNotFoundException: \\.\pipe\docker_engine (系统找不到指定的文件。)-->
                <!--解决方案：1. 本地安装docker. 2. 远程服务器安装docker,同时安装git,进行远程操作 3. 换插件，此插件已经很久没有维护了！！！例如：JIB,fabric8-->
                <!--<plugin>
                    <groupId>com.spotify</groupId>
                    <artifactId>dockerfile-maven-plugin</artifactId>
                    <version>1.4.13</version>
                    <executions>
                        <execution>
                            <id>default</id>
                            <goals>
                                <goal>build</goal>
                                <goal>push</goal>
                            </goals>
                        </execution>
                    </executions>
                    <configuration>
                        <contextDirectory>${project.basedir}</contextDirectory>
                        <dockerfile>${project.basedir}</dockerfile>
                        <repository>${docker.registry}/${project.artifactId}</repository>
                        <tag>${project.version}</tag>
                        <buildArgs>
                            <JAR_FILE>${project.basedir}/${project.build.finalName}.${project.packaging}</JAR_FILE>
                        </buildArgs>
                    </configuration>
                </plugin>-->
                <plugin>
                    <groupId>io.fabric8</groupId>
                    <artifactId>docker-maven-plugin</artifactId>
                    <version>${docker-maven-plugin.version}</version>
                    <!--全局配置-->
                    <configuration>
                        <!--配置远程docker守护进程url-->
                        <dockerHost>${docker.host}</dockerHost>
                        <!--认证配置,用于私有registry认证.maven.setting中配置的话，此处不需要了-->
                        <!-- <authConfig>
                             <username>${docker.username}</username>
                             <password>${docker.password}</password>
                         </authConfig>-->
                        <!--registry地址,用于推送,拉取镜像-->
                        <registry>${docker.registry}</registry>

                        <!--用于在标准输出中打开详细输出的字符串属性，默认是false-->
                        <verbose>true</verbose>

                        <!--镜像相关配置,支持多镜像-->
                        <images>
                            <!-- 单个镜像配置 -->
                            <image>
                                <!--镜像名(含版本号)-->
                                <!--                                <name>${docker.username}/${project.name}:${project.version}</name>-->
                                <name>${docker.namespace}/${project.name}:${project.version}</name>
                                <!--镜像build相关配置-->
                                <build>

                                    <!--docker-assembly.xml 定义镜像中的文件-->
                                    <!--       <assembly>

                                           </assembly>-->

                                    <!--使用dockerFile文件，定义构建镜像的流程-->
                                    <dockerFile>${project.basedir}/Dockerfile</dockerFile>
                                </build>
                            </image>
                        </images>
                    </configuration>

                    <executions>
                        <!--绑定maven的生命周期-->
                        <execution>
                            <id>docker-build</id>
                            <phase>install</phase>
                            <goals>
                                <goal>build</goal>
                            </goals>
                        </execution>

                        <execution>
                            <id>docker-push</id>
                            <phase>deploy</phase>
                            <goals>
                                <goal>push</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
            </plugins>
        </pluginManagement>
        <plugins>
            <!--maven的compiler插件，默认只支持jdk1.3，因此需要指定jdk版本-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <!--jdk8和更早版本，编译器指定jdk版本方式-->
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                    <!--                    <release>14</release>-->
                    <encoding>${project.build.sourceEncoding}</encoding>
                    <showWarnings>true</showWarnings>
                    <annotationProcessorPaths>
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                            <version>${lombok.version}</version>
                        </path>
                        <path>
                            <groupId>org.mapstruct</groupId>
                            <artifactId>mapstruct-processor</artifactId>
                            <version>${mapstruct-processor.version}</version>
                        </path>
                        <path>
                            <groupId>org.springframework.boot</groupId>
                            <artifactId>spring-boot-configuration-processor</artifactId>
                            <version>${spring-boot-dependencies.version}</version>
                        </path>
                    </annotationProcessorPaths>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <configuration>
                    <delimiters>${resource.delimiter}</delimiters>
                    <useDefaultDelimiters>false</useDefaultDelimiters>
                </configuration>
            </plugin>
            <plugin>
                <!--打包跳过测试-->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <configuration>
                    <skipSource>${skip.build.source.package}</skipSource>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>versions-maven-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>pl.project13.maven</groupId>
                <artifactId>git-commit-id-plugin</artifactId>
                <configuration>
                    <skip>${skip.build.git.commit.info}</skip>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-archetype-plugin</artifactId>
            </plugin>
            <!--checkstyle：校验代码规范-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-checkstyle-plugin</artifactId>
                <version>${maven-checkstyle-plugin.version}</version>
                <configuration>
                    <configLocation>configurations/style/sun_checks.xml</configLocation>
                    <includeTestSourceDirectory>false</includeTestSourceDirectory>
                    <consoleOutput>true</consoleOutput>
                    <failsOnError>true</failsOnError>
                </configuration>
                <executions>
                    <execution>
                        <id>validate</id>
                        <phase>validate</phase>
                        <goals>
                            <goal>check</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <reporting>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jxr-plugin</artifactId>
                <!--                <version>${maven.jxr.version}</version>-->
                <version>2.5</version>
            </plugin>
        </plugins>
    </reporting>
</project>