<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>cn.widdo</groupId>
        <artifactId>widdo-dependencies</artifactId>
        <!--升级 -->
        <version>263.1.1.0</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <groupId>cn.widdo</groupId>
    <artifactId>widdo</artifactId>
    <version>263.1.1.0</version>
    <packaging>pom</packaging>

    <name>widdo</name>
    <description>widdo</description>

    <modules>
        <module>widdo-cloud</module>
        <module>widdo-packages</module>
        <module>widdo-services</module>
        <module>widdo-dependencies</module>
        <module>widdo-docs</module>
        <module>widdo-autoconfigure</module>
        <module>widdo-starters</module>
    </modules>

    <!-- ${basedir} 项目根目录 -->
    <!-- ${project.build.directory} 构建目录，缺省为target -->
    <!-- ${project.build.outputDirectory} 构建过程输出目录，缺省为target/classes -->
    <!-- ${project.build.finalName} 产出物名称，缺省为${project.artifactId}-${project.version} -->
    <!-- ${project.packaging} 打包类型，缺省为jar -->
    <!-- ${project.xxx} 当前pom文件的任意节点的内容 如project.artifactId -->

    <!-- 环境 -->
    <profiles>
        <!-- 开发 -->
        <profile>
            <id>dev</id>
            <activation>
                <!--默认激活配置-->
                <activeByDefault>true</activeByDefault>
            </activation>
            <properties>
                <!--当前环境-->
                <profile.name>development</profile.name>
                <!--                <database.type>postgresql</database.type>-->
                <database.type>mysql8</database.type>
                <!--代码构建控制-->
                <!--跳过构建源代码包-->
                <skip.build.source.package>false</skip.build.source.package>
                <!--不copy代码包到docker构建目录-->
                <skip.copy.docker.resource>false</skip.copy.docker.resource>
                <!--不执行git commit 构建-->
                <skip.build.git.commit.info>false</skip.build.git.commit.info>
                <!--Nacos配置中心地址-->
                <config.server-addr>localhost:8848</config.server-addr>
                <!--Nacos配置中心命名空间,用于支持多环境.这里必须使用ID，不能使用名称,默认为空-->
                <!-- develop-base-platform-dev-wxj-->
                <config.namespace>502d9fe0-6893-41e7-8fc5-0afe6f197d17</config.namespace>
                <!--Nacos服务发现地址-->
                <discovery.server-addr>localhost:8848</discovery.server-addr>
                <sentinel.server-addr>localhost:8848</sentinel.server-addr>
            </properties>
        </profile>
    </profiles>

    <build>
        <resources>
            <!-- 先指定 src/main/resources下所有文件及文件夹为资源文件 -->
            <resource>
                <directory>src/main/resources</directory>
                <includes>
                    <include>**/*</include>
                </includes>
                <filtering>true</filtering>
            </resource>
        </resources>
       <!-- <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-antrun-plugin</artifactId>
                    <version>${maven-antrun-plugin.version}</version>
                    <executions>
                        <execution>
                            <id>delete-jar-file</id>
                            <phase>pre-clean</phase>
                            <goals>
                                <goal>run</goal>
                            </goals>
                            <configuration>
                                <target>
                                    <delete file="${docker.build.directory}/${docker.resource.name}"/>
                                </target>
                            </configuration>
                        </execution>
                        <execution>
                            <id>prepare-docker-resource</id>
                            <phase>package</phase>
                            <goals>
                                <goal>run</goal>
                            </goals>
                            <configuration>
                                <target>
                                    &lt;!&ndash;jar包保存位置 &ndash;&gt;
                                    <copy todir="${docker.build.directory}">
                                        <fileset dir="${project.basedir}/target">
                                            <include name="${docker.resource.name}"/>
                                        </fileset>
                                    </copy>
                                </target>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>
                &lt;!&ndash; docker打包插件 &ndash;&gt;
                <plugin>
                    <groupId>io.fabric8</groupId>
                    <artifactId>docker-maven-plugin</artifactId>
                    <version>${docker-maven-plugin.version}</version>
                    &lt;!&ndash;全局配置&ndash;&gt;
                    <configuration>
                        &lt;!&ndash;这一部分是为了实现对远程docker容器的控制&ndash;&gt;
                        &lt;!&ndash;docker主机地址,用于完成docker各项功能,注意是tcp不是http!&ndash;&gt;
                        <dockerHost>${docker.host}</dockerHost>
                        &lt;!&ndash;docker远程访问所需证书地址,如果docker远程主机没有启用TLS验证则不需要配证书&ndash;&gt;
                        &lt;!&ndash;<certPath>${project.basedir}/docker/ssh</certPath>&ndash;&gt;

                        &lt;!&ndash;这一部分是为了实现docker镜像的构建和推送&ndash;&gt;
                        &lt;!&ndash;registry地址,用于推送,拉取镜像,我这里用的是阿里的registry&ndash;&gt;
                        <registry>${docker.registry}</registry>
                        &lt;!&ndash; 认证信息&ndash;&gt;
                        <authConfig>
                            <push>
                                <username>${docker.username}</username>
                                <password>${docker.password}</password>
                            </push>
                        </authConfig>
                        &lt;!&ndash;镜像相关配置,支持多镜像&ndash;&gt;
                        <images>
                            &lt;!&ndash; 单个镜像配置 &ndash;&gt;
                            <image>
                                &lt;!&ndash;镜像名(含版本号) 命名空间/仓库名称:镜像版本号&ndash;&gt;
                                <name>命名空间/仓库名称:镜像版本号</name>
                                <name>${docker.registry}/${docker.namespace}/${project.name}:${project.version}</name>
                                &lt;!&ndash;别名:用于容器命名和在docker-compose.yml文件只能找到对应名字的配置&ndash;&gt;
                                <alias>${project.name}</alias>
                                &lt;!&ndash;镜像build相关配置&ndash;&gt;
                                <build>
                                    &lt;!&ndash;使用dockerFile文件&ndash;&gt;
                                    <dockerFile>${project.basedir}/Dockerfile</dockerFile>
                                </build>
                            </image>
                        </images>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>-->
        <plugins>
            <!--maven的compiler插件，默认只支持jdk1.3，因此需要指定jdk版本-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                    <encoding>${project.build.sourceEncoding}</encoding>
                    <showWarnings>true</showWarnings>
                    <annotationProcessorPaths>
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                            <version>${lombok.version}</version>
                        </path>
                        <path>
                            <groupId>org.mapstruct</groupId>
                            <artifactId>mapstruct-processor</artifactId>
                            <version>${mapstruct-processor.version}</version>
                        </path>
                        <path>
                            <groupId>org.springframework.boot</groupId>
                            <artifactId>spring-boot-configuration-processor</artifactId>
                            <version>${spring-boot-dependencies.version}</version>
                        </path>
                    </annotationProcessorPaths>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <configuration>
                    <delimiters>${resource.delimiter}</delimiters>
                    <useDefaultDelimiters>false</useDefaultDelimiters>
                </configuration>
            </plugin>
            <plugin>
                <!--打包跳过测试-->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <configuration>
                    <skipSource>${skip.build.source.package}</skipSource>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>versions-maven-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>pl.project13.maven</groupId>
                <artifactId>git-commit-id-plugin</artifactId>
                <configuration>
                    <skip>${skip.build.git.commit.info}</skip>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-archetype-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
</project>