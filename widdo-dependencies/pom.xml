<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <!--升级 -->
        <version>3.0.2</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <groupId>cn.widdo</groupId>
    <artifactId>widdo-dependencies</artifactId>
    <version>302.1.0.0</version>
    <packaging>pom</packaging>

    <name>widdo-dependencies</name>
    <description>widdo dependencies</description>

    <properties>

        <!--spring相关依赖包-->
        <spring-boot-dependencies.version>3.0.2</spring-boot-dependencies.version>
        <spring-cloud-dependencies.version>2022.0.1</spring-cloud-dependencies.version>
        <spring-cloud-alibaba-dependencies.version>2022.0.0.0-RC1</spring-cloud-alibaba-dependencies.version>
        <!--        <spring-cloud-stream-dependencies.version>3.2.2</spring-cloud-stream-dependencies.version>-->
        <spring-framework-bom.version>5.3.21</spring-framework-bom.version>
        <spring-security-bom.version>5.7.2</spring-security-bom.version>

        <!--Maven Plugin 相关组件-->
        <dockerfile-maven-plugin.version>1.4.13</dockerfile-maven-plugin.version>
        <docker-maven-plugin.version>0.39.0</docker-maven-plugin.version>
        <git-commit-id-plugin.version>4.9.10</git-commit-id-plugin.version>
        <mapstruct-processor.version>1.4.2.Final</mapstruct-processor.version>
        <maven-archetype-plugin.version>3.2.1</maven-archetype-plugin.version>
        <maven-compiler-plugin.version>3.8.1</maven-compiler-plugin.version>
        <maven-resources-plugin.version>3.2.0</maven-resources-plugin.version>
        <maven-surefire-plugin.version>2.22.2</maven-surefire-plugin.version>
        <maven-source-plugin.version>3.2.1</maven-source-plugin.version>
        <versions-maven-plugin.version>2.8.1</versions-maven-plugin.version>
        <git-commit-id-plugin.version>4.9.10</git-commit-id-plugin.version>
        <maven-checkstyle-plugin.version>3.2.0</maven-checkstyle-plugin.version>

        <!--通用开源工具依赖包-->
        <commons-lang3.version>3.12.0</commons-lang3.version>
        <google-guava.version>31.0.1-jre</google-guava.version>

        <!--辅助工具依赖包-->
        <lombok.version>1.18.22</lombok.version>
        <p6spy.version>3.9.1</p6spy.version>

        <!--阿里巴巴开源工具-->
        <fastjson.version>1.2.83</fastjson.version>

        <!--国内开源工具依赖包-->
        <hutool.verion>5.7.20</hutool.verion>

        <!--第三方工具依赖包-->
        <!--缓存依赖包-->
        <redisson.version>3.15.3</redisson.version>
        <mybatis-plus-boot-starter.version>3.5.2</mybatis-plus-boot-starter.version>
        <mybatis-plus-generator.version>3.5.2</mybatis-plus-generator.version>
        <assertj.version>3.22.0</assertj.version>

        <!--图数据库相关工具依赖包-->
        <neo4j-java-driver.version>5.4.0</neo4j-java-driver.version>
        <neo4j.version>5.4.0</neo4j.version>
        <!--start @since 302.1.0.0-->
        <neo4j-spark.version>4.1.5_for_spark_3</neo4j-spark.version>
        <!--        <neo4j-spark.version>4.1.1_for_spark_2.4</neo4j-spark.version>-->
        <!--end-->

        <orientdb-jdbc.version>3.0.29</orientdb-jdbc.version>
        <orientdb-gremlin.version>3.0.29</orientdb-gremlin.version>

        <!--系统信息-->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>17</java.version>
        <resource.delimiter>@</resource.delimiter>

        <!--wordnet相关-->
        <jwi.version>2.1.3</jwi.version>

        <!--spark相关 @since 302.1.0.0-->
        <!--        <spark.version>2.4.8</spark.version>-->
        <spark.version>3.2.1</spark.version>
        <scala.version>2.12</scala.version>
        <janino.version>3.0.8</janino.version>
        <!--end -->

        <!--jena相关-->
        <jena-lib.version>4.7.0</jena-lib.version>

        <!--grpc-->
        <grpc.version>1.53.0</grpc.version>

    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring-boot-dependencies.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud-dependencies.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!-- 升级，替换为 com.alibaba.cloud -->
            <dependency>
                <groupId>com.alibaba.cloud</groupId>
                <artifactId>spring-cloud-alibaba-dependencies</artifactId>
                <version>${spring-cloud-alibaba-dependencies.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <!--           &lt;!&ndash;spring-cloud-stream&ndash;&gt;
                       <dependency>
                           <groupId>org.springframework.cloud</groupId>
                           <artifactId>spring-cloud-stream-dependencies</artifactId>
                           <version>${spring-cloud-stream-dependencies.version}</version>
                           <type>pom</type>
                           <scope>import</scope>
                       </dependency>-->

            <dependency>
                <groupId>org.springframework.security</groupId>
                <artifactId>spring-security-bom</artifactId>
                <version>${spring-security-bom.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-framework-bom</artifactId>
                <version>${spring-framework-bom.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>


            <!--widdo依赖-->
            <dependency>
                <groupId>${project.groupId}</groupId>
                <artifactId>widdo-assistant</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>${project.groupId}</groupId>
                <artifactId>widdo-cache</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>${project.groupId}</groupId>
                <artifactId>widdo-data</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>${project.groupId}</groupId>
                <artifactId>widdo-autoconfigure</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>${project.groupId}</groupId>
                <artifactId>widdo-starter-neo4j</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>${project.groupId}</groupId>
                <artifactId>widdo-starter-orientdb</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>${project.groupId}</groupId>
                <artifactId>widdo-starter-jwi</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>${project.groupId}</groupId>
                <artifactId>widdo-starter-babelnet</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>cn.widdo</groupId>
                <artifactId>widdo-starter-jena</artifactId>
                <version>${project.version}</version>
            </dependency>

            <!--通用开源工具-->
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-lang3</artifactId>
                <version>${commons-lang3.version}</version>
            </dependency>
            <dependency>
                <groupId>com.google.guava</groupId>
                <artifactId>guava</artifactId>
                <version>${google-guava.version}</version>
                <scope>compile</scope>
            </dependency>

            <!--辅助工具-->
            <dependency>
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok</artifactId>
                <version>${lombok.version}</version>
            </dependency>
            <dependency>
                <groupId>p6spy</groupId>
                <artifactId>p6spy</artifactId>
                <version>${p6spy.version}</version>
            </dependency>


            <!--阿里巴巴开源工具-->
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>fastjson</artifactId>
                <version>${fastjson.version}</version>
            </dependency>

            <!--国内开源工具-->
            <dependency>
                <groupId>cn.hutool</groupId>
                <artifactId>hutool-all</artifactId>
                <version>${hutool.verion}</version>
            </dependency>

            <!--第三方工具-->
            <!-- redisson 分布式锁-->
            <dependency>
                <groupId>org.redisson</groupId>
                <artifactId>redisson-spring-boot-starter</artifactId>
                <version>${redisson.version}</version>
            </dependency>

            <!--存在SQL注入漏洞。漏洞场景：like；in；order by。需要预编译-->
            <dependency>
                <groupId>com.baomidou</groupId>
                <artifactId>mybatis-plus-boot-starter</artifactId>
                <version>${mybatis-plus-boot-starter.version}</version>
            </dependency>
            <dependency>
                <groupId>com.baomidou</groupId>
                <artifactId>mybatis-plus-generator</artifactId>
                <version>${mybatis-plus-generator.version}</version>
            </dependency>
            <dependency>
                <groupId>org.assertj</groupId>
                <artifactId>assertj-core</artifactId>
                <version>${assertj.version}</version>
                <scope>test</scope>
            </dependency>

            <!--图数据库工具-->
            <!--neo4j-->
            <dependency>
                <groupId>org.neo4j.driver</groupId>
                <artifactId>neo4j-java-driver</artifactId>
                <version>${neo4j-java-driver.version}</version>
            </dependency>
            <!--Add a dependency section that includes the procedure and function APIs, which procedures and functions use at runtime.-->
            <dependency>
                <groupId>org.neo4j</groupId>
                <artifactId>neo4j</artifactId>
                <version>${neo4j.version}</version>
            </dependency>
            <!--Add dependencies that are necessary for testing the procedure.-->
            <dependency>
                <groupId>org.neo4j.test</groupId>
                <artifactId>neo4j-harness</artifactId>
                <version>${neo4j.version}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>com.orientechnologies</groupId>
                <artifactId>orientdb-jdbc</artifactId>
                <version>${orientdb-jdbc.version}</version>
            </dependency>
            <dependency>
                <groupId>com.orientechnologies</groupId>
                <artifactId>orientdb-gremlin</artifactId>
                <version>${orientdb-gremlin.version}</version>
            </dependency>
            <dependency>
                <groupId>org.neo4j</groupId>
                <artifactId>neo4j-connector-apache-spark_2.12</artifactId>
                <version>${neo4j-spark.version}</version>
            </dependency>

            <!--wordnet相关-->
            <dependency>
                <groupId>edu.mit.jwi</groupId>
                <artifactId>edu.mit.jwi</artifactId>
                <version>${jwi.version}</version>
            </dependency>

            <!--spark相关 @since 302.1.0.0-->
            <dependency>
                <groupId>org.apache.spark</groupId>
                <artifactId>spark-core_2.12</artifactId>
                <version>${spark.version}</version>
                <!--排除log4j12,解决和logback冲突问题-->
                <exclusions>
                    <exclusion>
                        <artifactId>slf4j-log4j12</artifactId>
                        <groupId>org.slf4j</groupId>
                    </exclusion>
                </exclusions>
            </dependency>
            <dependency>
                <groupId>org.apache.spark</groupId>
                <artifactId>spark-sql_2.12</artifactId>
                <version>${spark.version}</version>
            </dependency>
            <dependency>
                <groupId>org.codehaus.janino</groupId>
                <artifactId>janino</artifactId>
                <version>${janino.version}</version>
            </dependency>
            <!--end-->

            <!--jena-->
            <dependency>
                <groupId>org.apache.jena</groupId>
                <artifactId>apache-jena-libs</artifactId>
                <type>pom</type>
                <version>${jena-lib.version}</version>
            </dependency>

            <!--grapc-->
            <dependency>
                <groupId>io.grpc</groupId>
                <artifactId>grpc-all</artifactId>
                <version>${grpc.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <distributionManagement>
        <repository>
            <!--id的名字可以任意取，但是在setting文件中的属性<server>的ID与这里一致-->
            <id>releases</id>
            <!--指向仓库类型为host(宿主仓库）的储存类型为Release的仓库-->
            <url>http://localhost:8081/repository/semanticcube-release/</url>
        </repository>
        <snapshotRepository>
            <id>snapshots</id>
            <!--指向仓库类型为host(宿主仓库）的储存类型为Snapshot的仓库-->
            <url>http://localhost:8081/repository/semanticcube-snapshot/</url>
        </snapshotRepository>
    </distributionManagement>
    <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>${maven-compiler-plugin.version}</version>
                    <configuration>
                        <!--jdk8和更早版本，编译器指定jdk版本方式-->
                        <source>${java.version}</source>
                        <target>${java.version}</target>
                        <!--                        <release>14</release>-->
                        <encoding>${project.build.sourceEncoding}</encoding>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-resources-plugin</artifactId>
                    <version>${maven-resources-plugin.version}</version>
                </plugin>
                <plugin>
                    <!--打包跳过测试-->
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>${maven-surefire-plugin.version}</version>
                    <configuration>
                        <skipTests>true</skipTests>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-source-plugin</artifactId>
                    <version>${maven-source-plugin.version}</version>
                    <configuration>
                        <attach>true</attach>
                    </configuration>
                    <executions>
                        <execution>
                            <id>attach-sources</id>
                            <goals>
                                <goal>jar-no-fork</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                    <version>${spring-boot-dependencies.version}</version>
                    <configuration>
                        <layers>
                            <enabled>true</enabled>
                        </layers>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>versions-maven-plugin</artifactId>
                    <version>${versions-maven-plugin.version}</version>
                    <configuration>
                        <generateBackupPoms>false</generateBackupPoms>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>pl.project13.maven</groupId>
                    <artifactId>git-commit-id-plugin</artifactId>
                    <version>${git-commit-id-plugin.version}</version>
                    <configuration>
                        <!-- 检查的仓库根目录，${project.basedir}：项目根目录，即包含pom.xml文件的目录 -->
                        <dotGitDirectory>${project.basedir}/.git</dotGitDirectory>
                        <!-- git属性文件中各属性前缀，默认值git，可以不配置 -->
                        <prefix>git</prefix>
                        <!-- false：扫描路径时不打印更多信息，默认值false，可以不配置 -->
                        <verbose>false</verbose>
                        <!-- 生成git属性文件，默认false：不生成 -->
                        <generateGitPropertiesFile>true</generateGitPropertiesFile>
                        <!-- 生成git属性文件路径及文件名，默认${project.build.outputDirectory}/git.properties -->
                        <generateGitPropertiesFilename>${project.build.outputDirectory}/git.properties
                        </generateGitPropertiesFilename>
                        <dateFormat>yyyy-MM-dd HH:mm:ss</dateFormat>
                        <!-- 生成git属性文件格式，默认值properties -->
                        <!--                        <format>json</format>-->
                        <!-- 配置git-describe命令 -->
                        <gitDescribe>
                            <skip>false</skip>
                            <always>false</always>
                            <dirty>-dirty</dirty>
                        </gitDescribe>
                    </configuration>
                </plugin>
                <!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-archetype-plugin -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-archetype-plugin</artifactId>
                    <version>${maven-archetype-plugin.version}</version>
                </plugin>

                <!--checkstyle：校验代码规范-->
                <!-- <plugin>
                     <groupId>org.apache.maven.plugins</groupId>
                     <artifactId>maven-checkstyle-plugin</artifactId>
                     <version>${maven-checkstyle-plugin.vesion}</version>
                     <configuration>
                         <configLocation>../configurations/style/sun_checks.xml</configLocation>
                         <includeTestSourceDirectory>false</includeTestSourceDirectory>
                         <consoleOutput>true</consoleOutput>
                         <failsOnError>true</failsOnError>
                     </configuration>
                     <executions>
                         <execution>
                             <id>validate</id>
                             <phase>validate</phase>
                             <goals>
                                 <goal>check</goal>
                             </goals>
                         </execution>
                     </executions>
                 </plugin>-->

                <!--   <plugin>
                       <groupId>com.github.shalousun</groupId>
                       <artifactId>smart-doc-maven-plugin</artifactId>
                       <version>2.6.0</version>
                       <configuration>
                           &lt;!&ndash;Specify the configuration file used to generate the document&ndash;&gt;
                           <configFile>./src/main/resources/smart-doc.json</configFile>
                           <projectName>test</projectName>
                           &lt;!&ndash;smart-doc implements automatic analysis of the dependency tree to load the source code of third-party dependencies. If some framework dependency libraries are not loaded, an error is reported, then use excludes to exclude&ndash;&gt;
                           <excludes>
                               &lt;!&ndash;The format is: groupId: artifactId; refer to the following&ndash;&gt;
                               &lt;!&ndash;Regular expressions can also be used, such as: com.google:.* &ndash;&gt;
                               <exclude>com.google.guava:guava</exclude>
                           </excludes>
                           &lt;!&ndash;Since version 1.0.8, the plugin provides includes support&ndash;&gt;
                           &lt;!&ndash;smart-doc can automatically analyze the dependency tree to load all dependent source code. In principle, it will affect the efficiency of document construction, so you can use includes to let the plugin load the components you configure.&ndash;&gt;
                           <includes>
                               &lt;!&ndash;The format is: groupId: artifactId; refer to the following&ndash;&gt;
                               &lt;!&ndash;Regular expressions can also be used, such as: com.google:.* &ndash;&gt;
                               <include>com.alibaba:fastjson</include>
                               &lt;!&ndash; If includes is configured, paging using mybatis-plus requires the source package used by include &ndash;&gt;
                               <include>com.baomidou:mybatis-plus-extension</include>
                               &lt;!&ndash; If includes is configured, paging using jpa requires the source package used by include &ndash;&gt;
                               <include>org.springframework.data:spring-data-commons</include>
                           </includes>
                       </configuration>
                       <executions>
                           <execution>
                               &lt;!&ndash;Comment out phase if you don't need to start smart-doc when compiling&ndash;&gt;
                               <phase>compile</phase>
                               <goals>
                                   &lt;!&ndash;smart-doc provides html, openapi, markdown, adoc and other goals&ndash;&gt;
                                   <goal>html</goal>
                               </goals>
                           </execution>
                       </executions>
                   </plugin>-->

                <!-- PMD插件 -->
                <!--  <plugin>
                      <groupId>org.apache.maven.plugins</groupId>
                      <artifactId>maven-pmd-plugin</artifactId>
                      <version>3.19.0</version>
                      <configuration>
                          <sourceEncoding>${project.build.sourceEncoding}</sourceEncoding>
                          <targetJdk>${java.version}</targetJdk>
                          <printFailingErrors>true</printFailingErrors>
                          &lt;!&ndash; 代码检查规则,用不着全部，按需 &ndash;&gt;
                          <rulesets>
                              <ruleset>rulesets/java/ali-comment.xml</ruleset>
                              &lt;!&ndash;                        <ruleset>rulesets/java/ali-concurrent.xml</ruleset>&ndash;&gt;
                              <ruleset>rulesets/java/ali-constant.xml</ruleset>
                              <ruleset>rulesets/java/ali-exception.xml</ruleset>
                              <ruleset>rulesets/java/ali-flowcontrol.xml</ruleset>
                              &lt;!&ndash;                        <ruleset>rulesets/java/ali-naming.xml</ruleset>&ndash;&gt;
                              <ruleset>rulesets/java/ali-oop.xml</ruleset>
                              &lt;!&ndash;                        <ruleset>rulesets/java/ali-orm.xml</ruleset>&ndash;&gt;
                              &lt;!&ndash;                        <ruleset>rulesets/java/ali-other.xml</ruleset>&ndash;&gt;
                              &lt;!&ndash;                        <ruleset>rulesets/java/ali-set.xml</ruleset>&ndash;&gt;
                          </rulesets>
                      </configuration>
                      <executions>
                          &lt;!&ndash;绑定pmd:check到verify生命周期&ndash;&gt;
                          <execution>
                              <id>pmd-check-package</id>
                              <phase>package</phase>
                              <goals>
                                  <goal>check</goal>
                              </goals>
                          </execution>
                          &lt;!&ndash; 绑定pmd:check到verify生命周期 &ndash;&gt;
                          <execution>
                              <id>pmd-check-verify</id>
                              <phase>verify</phase>
                              <goals>
                                  <goal>check</goal>
                              </goals>
                          </execution>
                          &lt;!&ndash; 绑定pmd:pmd到site生命周期 &ndash;&gt;
                          <execution>
                              <id>pmd-pmd-site</id>
                              <phase>site</phase>
                              <goals>
                                  <goal>pmd</goal>
                              </goals>
                          </execution>
                      </executions>
                      &lt;!&ndash; p3c依赖 &ndash;&gt;
                      <dependencies>
                          <dependency>
                              <groupId>com.alibaba.p3c</groupId>
                              <artifactId>p3c-pmd</artifactId>
                              <version>1.3.5</version>
                          </dependency>
                      </dependencies>
                  </plugin>-->
            </plugins>
        </pluginManagement>
    </build>
</project>